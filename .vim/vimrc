" get paths sorted
" see: https://bit.ly/3l2t4aI
let $VIMHOME=expand('<sfile>:p:h')
let $VIMTEMPLATES='$VIMHOME/templates'
let $VIMPLUG='$VIMHOME/autoload/plug.vim'

" new files with an extension of sh should use template
if has("autocmd")
  augroup templates
    autocmd BufNewFile *.sh 0r $VIMTEMPLATES/sh.skeleton
  augroup END
endif

" keep cursor broadly in the center of the screen
set scrolloff=15

" sensible deaults for files
set encoding=utf-8
set fileformats=unix " assume *nix line endings

"  TABS AND INDENTS
set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2
set shiftround
set autoindent
set complete-=i
set list listchars=tab:»·,trail:·,nbsp:·

" sensible backspace, questionable cursor
set virtualedit=onemore           " cursor can go beyond end of text
set backspace=indent,eol,start    " backspace works across lines

" DISPLAY
set textwidth=79
set colorcolumn=80,110            " 80 for code, 110 for writing

" Read and write
set autoread                      " if file is modified elsewhere, reload it
set autowrite                     " save file on loss of focus
autocmd FocusLost * wa
autocmd CursorHold * wa


" Display
set incsearch                     " update searches as type
set hlsearch                      " show previous matches
set ignorecase                    " searches ignore case
set smartcase                     " don't ignore capitals in searches
set cursorline                    " highlight current line
set showmatch                     " show matching bracket etc.

augroup vimrc_autocmds
  autocmd BufEnter * highlight OverLength ctermbg=darkgrey guibg=#592929
  autocmd BufEnter * match OverLength /\%80v.*/
augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                            REMAPPED KEYS
" (plugin-specific stuff in the relevant section)

" leader z to call zotero cite function
noremap <leader>z "=local_functions#ZoteroCite()<CR>p

" remove highlights
nnoremap <leader>/ :nohls <enter>

" better yank and put
noremap <leader>y "+y
noremap <leader>p "+p

" split windows using - and =
nnoremap <leader>- <C-W>s
nnoremap <leader>= <C-W>v

" reflow paragraphs
nnoremap <leader>f gwip
vnoremap <leader>f gw

"write changes with `sudo`
command W :execute ':silent w !sudo tee % > /dev/null' <bar> :edit!

" move as if everything is a hard wrap
nnoremap j gj
nnoremap k gk

" toggle numbers with F2
map <F2> :set number!<Bar>set number?<CR>

" source $MYVIMRC reloads the saved $MYVIMRC
:nmap <Leader>s :source $MYVIMRC <CR>

" opens $MYVIMRC for editing, or use :tabedit $MYVIMRC
:nmap <Leader>v :e $MYVIMRC <CR>

:nmap <Leader>t :WakaTimeToday<CR>
" markdown folding

let g:markdown_folding = 1
set nofoldenable

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                 SPELLING
set spell spelllang=en_gb

" toggle spellcheck highlighting with F5
nnoremap <leader>5 :call local_functions#ToggleSpell()<CR>

" next two blocks make sure spelling is initially _off_
hi clear SpellBad
hi clear Spellcap
hi clear SpellLocal
hi clear SpellRare

augroup SpellUnderline
  autocmd!
  autocmd ColorScheme * highlight SpellBad   ctermfg=NONE ctermbg=NONE
  autocmd ColorScheme * highlight SpellCap   ctermfg=NONE ctermbg=NONE
  autocmd ColorScheme * highlight SpellLocal ctermfg=NONE ctermbg=NONE
  autocmd ColorScheme * highlight SpellRare  ctermfg=NONE ctermbg=NONE
augroup END

" accept first match in spell check (insert mode)
inoremap <C-L> <esc>[s1z=`]<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                             MD-IMG-PASTE
autocmd FileType markdown nmap <buffer><silent> <leader>p :call mdip#MarkdownClipboardImage()<CR>
let g:mdip_imgdir = 'attachments'
let g:mdip_imgname = 'image'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                             FINDNG FILES
filetype plugin on
" tab completion on all files
set path+=**
set wildmenu wildmode=list:full
set autochdir

" NetRW
let g:netrw_liststyle = 1 " Detail View
let g:netrw_sizestyle = "H" " Human-readable file sizes
let g:netrw_banner = 0 " Turn off banner
" Explore in vertical split
nnoremap <Leader>e :Explore! <enter>

" if a build script exists at this level call it using \b
" see: https://github.com/JasmineElm/reports
noremap <leader>b :! ./build -w<cr>

" run shfmt on current file, force a redraw by jumping between marks
noremap <leader>k :execute 'silent !shfmt -i 2 -ci -bn -w %'<cr> ````

" paste a date
noremap <leader>d :put =strftime('%a %d-%b-%y %OH:%M')<CR>A<CR>

" SPLITS
"
noremap <leader>= <c-w>v
noremap <leader>- <c-w>s


" show number of errors
function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors
    return l:counts.total == 0 ? 'OK' : printf(
        \   '%d⨉ %d⚠ ',
        \   all_non_errors,
        \   all_errors
        \)
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                LIMELIGHT
let g:limelight_conceal_ctermfg     = 'gray'
let g:limelight_conceal_guifg       = 'DarkGray'
let g:limelight_default_coefficient = 0.3
map <leader>w :Limelight!!<CR>

" turn-on distraction free writing mode for markdown files
au BufNewFile,BufRead *.{md,mdown,mkd,mkdn,markdown,mdwn} call DistractionFreeWriting()

function! DistractionFreeWriting()
    :Limelight
    call lexical#init()
    call litecorrect#init()
    set rulerformat=%#TabLineSel#\ %{local_functions#WordCount()}%{LinterStatus()}%#Statement#\ %m\ %#VisualNOS#\ %l:%c
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                      ALE
highlight ALEErrorSign ctermbg        =NONE ctermfg=red
highlight ALEWarningSign ctermbg      =NONE ctermfg=yellow
"let g:ale_linters_explicit            = 1
let g:ale_lint_on_text_changed        = 'never'
let g:ale_lint_on_enter               = 0
let g:ale_lint_on_save                = 1
let g:ale_fix_on_save                 = 1

let g:ale_fixers = {
\   '*':          ['remove_trailing_lines', 'trim_whitespace'],
\   'markdown':   ['pandoc'],
\   'shell':      ['shfmt'],
\}


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                    WORDY
let g:wordy#ring = [
  \ 'weak',
  \ ['being', 'passive-voice', ],
  \ 'business-jargon',
  \ 'weasel',
  \ 'puffery',
  \ ['problematic', 'redundant', ],
  \ ['colloquial', 'idiomatic', 'similies', ],
  \ 'art-jargon',
  \ ['contractions', 'opinion', 'vague-time', 'said-synonyms', ],
  \ 'adjectives',
  \ 'adverbs',
  \ ]
noremap <leader>g :<C-u>NextWordy<cr>
xnoremap <leader>g :<C-u>NextWordy<cr>
inoremap <leader>g :<C-o>:NextWordy<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                 VIM-PLUG
if empty(glob($VIMPLUG))
  silent !curl -fLo $VIMPLUG --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


call plug#begin()
Plug 'junegunn/limelight.vim'           " Distraction free writing
Plug 'ctrlpvim/ctrlp.vim'               " For sensible link insertion
Plug 'reedes/vim-lexical'               " Better spellcheck mappings
Plug 'reedes/vim-litecorrect'           " Better autocorrections
Plug 'reedes/vim-wordy'                 " Weasel words and passive voice
Plug 'morhetz/gruvbox'                  " a pretty theme...
Plug 'wakatime/vim-wakatime'            " quantify...
Plug 'ferrine/md-img-paste.vim'         " obsidian-style img paste
Plug 'dense-analysis/ale'               " ALE

call plug#end()

" colourscheme mow it's loaded...
colorscheme gruvbox
set background=dark
let g:gruvbox_contrast_dark='hard'
